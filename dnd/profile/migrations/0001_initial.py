# Generated by Django 3.1.5 on 2021-02-22 19:55

from dnd.base import constant
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('feed', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('lastname', models.CharField(error_messages={'invalid': 'A lastname may only contain letters'}, help_text='150 characters or fewer. Letters only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z]*$'), code='invalid', message='Enter a valid word consisting of letters and - only.')], verbose_name='lastname')),
                ('firstname', models.CharField(error_messages={'invalid': 'A firstname may only contain letters'}, help_text='150 characters or fewer. Letters only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z]*$'), code='invalid', message='Enter a valid word consisting of letters and - only.')], verbose_name='firstname')),
                ('birth_date', models.DateField(error_messages={'to_old': 'You should not lie about your age', 'to_young': 'Sorry you legally can not register on social media'}, help_text='Enter your date of birth dd/mm/yyyy', validators=[
                    constant.date_validator], verbose_name='birth date')),
                ('discord', models.CharField(blank=True, default='', error_messages={'invalid': 'Invalid discord username. It must be formatted like this : username#0000'}, help_text='username#0000', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('.*#[0-9]{4}'), code='invalid', message='Enter a valid discord username.')], verbose_name='discord')),
                ('status_open_master', models.BooleanField(default=False, verbose_name='open to master')),
                ('status_open_player', models.BooleanField(default=False, verbose_name='open to play')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='feed.post')),
                ('title', models.CharField(error_messages={'invalid': 'Invalid title. letters, numbers, dash and space only'}, help_text='150 characters or fewer. Letters, number, dash and space only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[-0-9a-zA-Z]*$'), code='invalid', message='Enter a valid title consisting of letters, number, - and space only.')], verbose_name='title')),
                ('max_player', models.PositiveSmallIntegerField(error_messages={'max_value': '250 is the maximum number of player allowed in a campaign', 'min_value': 'You need to allow a least 1 player to join'}, help_text='Number maximum of player in this campaign, 1 to 250', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(251)], verbose_name='maximum number of player')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'open'), (2, 'close'), (3, 'archived')], default=2, verbose_name='status')),
                ('link_world', models.CharField(blank=True, error_messages={'invalid': 'Invalid link.'}, help_text='world anvil link', max_length=250, validators=[django.core.validators.URLValidator], verbose_name='world anvil')),
                ('default_link_vtable', models.CharField(blank=True, error_messages={'invalid': 'Invalid link.'}, help_text='virtual table link', max_length=250, validators=[django.core.validators.URLValidator], verbose_name='virtual table link')),
                ('default_link_vocal', models.CharField(blank=True, error_messages={'invalid': 'Invalid link.'}, help_text='discord voice channel link', max_length=250, validators=[django.core.validators.URLValidator], verbose_name='discord voice channel')),
                ('details', models.TextField(help_text='details', verbose_name='details')),
                ('master', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='master', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('feed.post',),
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='feed.post')),
                ('name', models.CharField(error_messages={'invalid': 'Invalid name. letters, numbers, dash and space only'}, help_text='150 characters or fewer. Letters, number, dash and space only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[-0-9a-zA-Z]*$'), code='invalid', message='Enter a valid title consisting of letters, number, - and space only.')], verbose_name='name')),
                ('character_class', models.CharField(help_text='150 characters or fewer.', max_length=150, verbose_name='class')),
                ('character_race', models.CharField(help_text='150 characters or fewer.', max_length=150, verbose_name='race')),
                ('character_level', models.PositiveSmallIntegerField(error_messages={'max_value': '40 (two class level 20) is currently the maximum level', 'min_value': 'You can be level 0'}, help_text='Number maximum of player in this campaign, 1 to 40', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(40)], verbose_name='character level')),
                ('link_sheet', models.CharField(blank=True, error_messages={'invalid': 'Invalid link.'}, help_text='link to your character sheet', max_length=250, validators=[django.core.validators.URLValidator], verbose_name='sheet link')),
                ('pdf_sheet', models.FileField(blank=True, error_messages={'invalid': 'Invalid file extension.'}, help_text='pdf of your character sheet', upload_to='', validators=[
                    constant.extension_validator], verbose_name='sheet pdf')),
                ('rule', models.TextField(help_text='Rule aplided on your charter separat by a ; . Ex : PHP+1; Stat array; ... ', verbose_name='rule')),
                ('details', models.TextField(help_text='details', verbose_name='details')),
                ('in_campaign', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='in_campaign', to='profile.campaign')),
            ],
            bases=('feed.post',),
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='feed.post')),
                ('title', models.CharField(blank=True, error_messages={'invalid': 'Invalid title. letters, numbers, dash and space only'}, help_text='150 characters or fewer. Letters, number, dash and space only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[-0-9a-zA-Z]*$'), code='invalid', message='Enter a valid title consisting of letters, number, - and space only.')], verbose_name='title')),
                ('date', models.DateField(verbose_name='play date')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'in waiting'), (2, 'validated'), (3, 'refused'), (4, 'archived')], default=1, verbose_name='status')),
                ('link_vtable', models.CharField(blank=True, error_messages={'invalid': 'Invalid link.'}, help_text='virtual table link', max_length=250, validators=[django.core.validators.URLValidator], verbose_name='virtual table link')),
                ('link_vocal', models.CharField(blank=True, error_messages={'invalid': 'Invalid link.'}, help_text='discord voice channel link', max_length=250, validators=[django.core.validators.URLValidator], verbose_name='discord voice channel')),
                ('for_campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='for_campaign', to='profile.campaign')),
            ],
            bases=('feed.post',),
        ),
        migrations.CreateModel(
            name='SessionsPlayerStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'in waiting'), (2, 'validated'), (3, 'refused'), (4, 'archived')], default=1, verbose_name='status')),
                ('lock', models.BooleanField(default=False, verbose_name='is locked')),
                ('update_date', models.DateField(auto_now=True, verbose_name='creation date')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player', to='profile.character')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session', to='profile.session')),
            ],
        ),
    ]
